C programming language`s file operation functions	[database数据库，DBMS / database management system 数据库管理系统]
C File Processing C文件处理	[sequential-access 顺序存取，random-access随机存取，bit == binary digit，Flie Control Block 文件控制块]

△FILE是在stdio.h头文件中定义的一个结构体，用来保存文件信息
*** 指向FILE结构体的指针变量 *********************************************************************************
【声明】		FILE *cfPtr
【描述】		文件位置指针有时也被称为文件偏移量(file offset)，文件位置指针是与每一个文件相联系的FILE结构体中的一个成员

*** EOF end of file *** foef() 函数 检测EOF是否被写入stdin所指向的文件 ************
是在 stdio.h 中定义的宏，它的值是一个负数，往往是 -1。返回值类型为 int，就是为了容纳这个负数（char不能是负数）
Linux/Max OS X/UNIX	<Ctrl> d
Windows			<Ctrl> z

*** 随机存取文件 random-access file ************************************************************
【描述】		记录通常是固定长度的，可以直接访问某个记录，无需先搜索其他记录
【优势】		可以保证在不破坏其它数据的情况下，向一个随机存取文件中插入数据，修改或者删除，无需重写整个文件


*** foef( ) 函数 <stdio.h> *** 侦测是否读取到了文件尾 ***********************************************
【函数原型】	int feof(FILE * stream);	//stream为fopen()所返回之文件指针
【返回值】	如果已到文件尾则返回非零值, 其他情况返回0



*** fopen( ) 函数 <stdio.h> *** 打开文件 ***********************************************************************
【头文件】 	<stdio.h>
【函数原型】	FILE *fopen(char *filename, char *mode);
【常见形式】	FILE *fp = fopen("D:\\demo.txt","r");//以只读方式打开demo.txt(必须存在)，并将FILE类型的结构体变量的指针保存在文件指针 fp 中
【参数说明】	filename为文件名（包括文件路径）	mode为打开方式，它们都是字符串
【函数说明】	获取文件信息，包括文件名、文件状态、当前读写位置等。并将这些信息保存到一个FILE类型的结构体变量中
【返回值】	返回一个 FILE 类型的指针
【warning】	


--- 打开方式(mode) -------------------------------------
打开方式	说明
r	以只读方式打开文件，只允许读取，不允许写入。该文件必须存在。
r+	以读/写方式打开文件，允许读取和写入。该文件必须存在。
rb+	以读/写方式打开一个二进制文件，允许读/写数据。
rt+	以读/写方式打开一个文本文件，允许读和写。
w	以只写方式打开文件，若文件存在则长度清为0，即该文件内容消失，若不存在则创建该文件。
w+	以读/写方式打开文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
a	以追加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，
	即文件原先的内容会被保留（EOF符保留)。
a+	以追加方式打开可读/写的文件。若文件不存在，则会建立该文件，如果文件存在，则写入的数据会被加到文件尾后，
	即文件原先的内容会被保留（原来的EOF符 不保留)。
wb	以只写方式打开或新建一个二进制文件，只允许写数据。
wb+	以读/写方式打开或建立一个二进制文件，允许读和写。
wt+	以读/写方式打开或建立一个文本文件，允许读写。
at+	以读/写方式打开一个文本文件，允许读或在文本末追加数据。
ab+	以读/写方式打开一个二进制文件，允许读或在文件末追加数据。

--- △几点说明
1) 文件打开方式由r、w、a、t、b、+ 六个字符拼成，各字符的含义是：
	r(read)：	读
	w(write)：	写
	a(append)：	追加
	t(text)：	文本文件，可省略不写
	b(banary)：	二进制文件
	+：		读和写

2) 如果没有“b”字符，文件以文本方式打开。

3) 凡用“r”打开一个文件时，该文件必须已经存在。

4) 在打开一个文件时，如果出错，fopen将返回一个空指针值NULL。
判断是否完成打开文件的工作：--- fopen() 使用 demo ---------
if( (fp=fopen("D:\\demo.txt","rb") == NULL ){	//fp是一个文件指针
    printf("Error on open D:\\demo.txt file!");
    getch();//从键盘输入一个字符，等待，当用户从键盘敲任一键时，程序才继续执行，可利用这个等待时间阅读出错提示
    exit(1);//退出程序
}

5) 把一个文本文件读入内存时，要将ASCII码转换成二进制码，而把文件以文本方式写入磁盘时，也要把二进制码转换成ASCII码，因此文本文件的读写要花费较多的转换时间。对二进制文件的读写不存在这种转换。


*** fclose( ) 函数 <stdio.h> *** 关闭文件 ***********************************************************************
【函数原型】	int fclose(FILE *fp);
【常见形式】	fclose(fp);
【参数说明】	fp 为文件指针
【返回值】	正常关闭时，fclose() 的返回值为0。	如果返回非零值则表示有错误发生


*** rewind( ) 函数 <stdio.h> *** 指向一个数据流/文件的开头 ******************************************
【函数原型】	void rewind(FILE *stream);	//传递一个文件指针
【常见形式】	rewind(fp);	//将文件内部的指针重新指向一个流的开头
【返回值】	无




*** fscanf( ) 函数 <stdio.h> *** 从一个流中执行格式化输入 ******************************************
【函数原型】	int fscanf(FILE*stream, constchar*format, [argument...]);//
【常见形式】	fscanf(fptr,"%s",s);	//从fptr指向的文件中读取字符串	//可用stdin
【参数说明】	FILE *stream 文件指针; char *format 格式字符串; [argument...] 输入列表;
【返回值】	成功返回读入的参数的个数，失败返回EOF(-1)
【warning】	fscanf遇到空格和换行时结束，注意空格时也结束，与fgets有区别，fgets遇到空格不结束




*** fprintf( ) 函数 <stdio.h> *** 格式化输出到一个流/文件中 ***************************************
【函数原型】	int fprintf( FILE *stream, const char *format, [ argument ]...);
【常见形式】	fprintf(fptr, "%s%c", s, c);	//向fptr指向的文件输出一个字符串和一个字符
【函数说明】	根据参数format字符串来转换并格式化数据, 然后将结果输出到参数stream指定的文件中, 直到出现字符串结束'\0'为止
【参数说明】	FILE*stream 文件指针; const char* format 输出格式; [argument] 附加参数列表
【返回值】	输出的字符数,发生错误时返回一个负值
【warning】	一般不能在某个位置上更新记录，要更新只能对整个文件进行重写。




*** fwrite( ) 函数 <stdio.h> *** 向文件写入一个数据块 ***************************************










































